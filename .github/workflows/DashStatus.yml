name: Org Repo Dash Scan

on:
  schedule:
    - cron: "0 2 * * *" # jeden Tag um 02:00 UTC
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Collect Dash workflow runs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ORG: eclipse-xfsc
        run: |
          echo "| Repo | Last Run | Status | Error Code | Run Link | Workflow File | Secrets inherit | Permissions read/write |" > IPSTATUS.md
          echo "|------|-----------|--------|-------------|-----------|----------------|-----------------|------------------------|" >> IPSTATUS.md

          repos=$(gh api --paginate /orgs/$ORG/repos --jq '.[].name')

          for repo in $repos; do
            # --- 1. Letzten *Eclipse Dash Scan* Run suchen ---
            run=$(gh api "repos/$ORG/$repo/actions/runs" \
                   --jq '[.workflow_runs[] | select((.name | test("Eclipse Dash Scan"; "i")) or (.path | test("eclipse-dash.yml$"; "i")))][0]' 2>/dev/null)

            if [ -z "$run" ] || [ "$run" = "null" ]; then
              lastRun="–"
              status_icon="⏳"
              run_link="–"
              error_code="–"
            else
              run_id=$(echo "$run" | jq -r '.id')
              lastRun=$(echo "$run" | jq -r '.created_at')
              status=$(echo "$run" | jq -r '.conclusion // .status')
              runUrl=$(echo "$run" | jq -r '.html_url')

              # --- 1b. Exakten Exit-Code aus fehlgeschlagenem Job holen ---
              if [ "$status" = "failure" ]; then
                # Ersten fehlgeschlagenen Job finden
                job_id=$(gh api "repos/$ORG/$repo/actions/runs/$run_id/jobs" \
                  --jq '.jobs[] | select(.conclusion=="failure") | .id' 2>/dev/null | head -n1)

                if [ -n "$job_id" ]; then
                  # Echten numerischen Exit-Code aus Step lesen
                  error_code=$(gh api "repos/$ORG/$repo/actions/jobs/$job_id" \
                    --jq '.steps[] | select(.conclusion=="failure") | .exit_code' 2>/dev/null | head -n1)
                fi

                # Fallback
                if [ -z "$error_code" ] || [ "$error_code" = "null" ]; then
                  error_code="1"
                fi
              elif [ "$status" = "success" ]; then
                error_code="0"
              else
                error_code="–"
              fi

              case "$status" in
                success) status_icon="✅" ;;
                failure) status_icon="❌" ;;
                cancelled) status_icon="🚫" ;;
                *) status_icon="⏳" ;;
              esac

              run_link="[Run]($runUrl)"
            fi

            # --- 2. Workflow-Datei prüfen ---
            wf_url="https://github.com/$ORG/$repo/blob/main/.github/workflows/eclipse-dash.yml"
            tmpfile=$(mktemp)
            if gh api "repos/$ORG/$repo/contents/.github/workflows/eclipse-dash.yml" \
                --jq '.content' 2>/dev/null | base64 -d > "$tmpfile" 2>/dev/null; then

              if grep -q "secrets:[[:space:]]*inherit" "$tmpfile"; then
                secrets_status="✅"
              else
                secrets_status="❌"
              fi

              if grep -q "permissions:[[:space:]]*$" "$tmpfile" && \
                 grep -q "contents:[[:space:]]*read" "$tmpfile" && \
                 grep -q "actions:[[:space:]]*write" "$tmpfile"; then
                perms_status="✅"
              else
                perms_status="❌"
              fi
            else
              secrets_status="🚫"
              perms_status="🚫"
            fi

            # --- 3. Markdown-Zeile schreiben ---
            echo "| $repo | $lastRun | $status_icon | $error_code | $run_link | [eclipse-dash.yml]($wf_url) | $secrets_status | $perms_status |" >> IPSTATUS.md
          done
          
      - name: Commit results
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add IPSTATUS.md
          git commit -m "Update IPSTATUS.md [skip ci]" || echo "No changes to commit"
          git push
